
#include "paramesh_preprocessor.fh"



      subroutine advance_soln(mype,time,dt)





!
! This file is a template describing how the solution can be
! initialized on the initial grid. Modify it for your own use.
!
!--------------------------------------------------------------
! include files for amr
      use paramesh_dimensions
      use physicaldata
      use tree
! Expose interfaces to paramesh subroutines used here !
      use paramesh_interfaces, only : amr_1blk_copy_soln, &
     &                                amr_1blk_guardcell, &
     &                                amr_1blk_to_perm, &
     &                                amr_restrict

      use paramesh_mpi_interfaces, only : mpi_amr_comm_setup

      integer :: mype
      real    :: time,dt
      integer :: nguard0
      real :: old_soln(il_bnd1:iu_bnd1,jl_bnd1:ju_bnd1,kl_bnd1:ku_bnd1)

      integer :: iempty
      logical :: lcc,lfc,lec,lnc,ldiag,l_srl_only
      logical :: lguard,lprolong,lflux,ledge,lrestrict,lfulltree
      integer :: iopt,tag_offset,nprocs,ierr
      include 'mpif.h'

!--------------------------------------------------------------


      nguard0 = nguard*npgs

      call amr_timestep(dt,dtmin,dtmax,mype)

! Store a copy of the current solution in gt_unk
        call amr_1blk_copy_soln(-1)


        if (.not.advance_all_levels) then
          iempty = 0
          iopt = 1
          call amr_restrict(mype,iopt,iempty)
        endif


        tag_offset = 100
        lcc = .true.
        lfc = .false.
        lec = .false.
        lnc = .false.
        lguard    = .true.
        lprolong  = .false.
        lflux     = .false.
        ledge     = .false.
        lrestrict = .false.
        lfulltree = .false.
        call MPI_COMM_SIZE(MPI_COMM_WORLD,nprocs,ierr)
        call mpi_amr_comm_setup(mype,nprocs, &
     &                        lguard,lprolong,lflux,ledge, &
     &                        lrestrict,lfulltree, &
     &                        iopt,lcc,lfc,lec,lnc,tag_offset)

! loop over leaf grid blocks
      if(lnblocks.gt.0) then
      do lb=1,lnblocks

      if(nodetype(lb).eq.1 .or. advance_all_levels) then

! Copy data from current block into working block and fill its guardcells
        idest = 1
        iopt = 1
        nlayers = nguard
        lcc = .true.
        lfc = .false.
        lec = .false.
        lnc = .false.
        l_srl_only = .false.
        icoord = 0
        ldiag = .true.

        call amr_1blk_guardcell(mype,iopt,nlayers,lb,mype, &
     &                          lcc,lfc,lec,lnc, &
     &                          l_srl_only,icoord,ldiag)

        if(nvar.gt.0) then

      old_soln(:,:,:) = unk1(1,:,:,:,idest)

! set values for unk
      dx = bsize(1,lb)/real(nxb)
      dy = bsize(2,lb)/real(nyb)
  
! set values for unk1
        do k=kl_bnd1+nguard*k3d,ku_bnd1-nguard*k3d
          do j=jl_bnd1+nguard*k2d,ju_bnd1-nguard*k2d
            do i=il_bnd1+nguard,iu_bnd1-nguard
  
            unk1(1,i,j,k,idest) = old_soln(i,j,k) + dt/(dx*dx)* ( &
     &                   old_soln(i+1,j,k) + old_soln(i-1,j,k) + &
     &                   old_soln(i,j+1,k) + old_soln(i,j-1,k) - &
     &                   old_soln(i,j,k)*4.0 )

            enddo
          enddo
        enddo
        endif

        if(nvarcorn.gt.0) then

! set values for unk_n
        do k=kl_bnd+nguard0*k3d,ku_bnd+(nguard0+1)*k3d
          do j=jl_bnd+nguard0*k2d,ju_bnd+(nguard0+1)*k2d
            do i=il_bnd+nguard0,iu_bnd+(nguard0+1)
!              unk_n(1,i,j,k,lb) = ???
!              unk_n(2,i,j,k,lb) = ???
!              .
!              .
!              .
            enddo
          enddo
        enddo

        endif


        if(nfacevar.gt.0) then

! set values for facevarx
        do k=kl_bnd+nguard0*k3d,ku_bnd+nguard0*k3d
          do j=jl_bnd+nguard0*k2d,ju_bnd+nguard0*k2d
            do i=il_bnd+nguard0,iu_bnd+nguard0+1
!              facevarx(1,i,j,k,lb) = ???
!              facevarx(2,i,j,k,lb) = ???
!              .
!              .
!              .
            enddo
          enddo
        enddo

! set values for facevary
        do k=kl_bnd+nguard0*k3d,ku_bnd+nguard0*k3d
          do j=jl_bnd+nguard0*k2d,ju_bnd+(nguard0+1)*k2d
            do i=il_bnd+nguard0,iu_bnd+nguard0
!              facevary(1,i,j,k,lb) = ???
!              facevary(2,i,j,k,lb) = ???
!              .
!              .
!              .
            enddo
          enddo
        enddo

! set values for facevarz
        do k=kl_bnd+nguard0*k3d,ku_bnd+(nguard0+1)*k3d
          do j=jl_bnd+nguard0*k2d,ju_bnd+nguard0*k2d
            do i=il_bnd+nguard0,iu_bnd+nguard0
!              facevarz(1,i,j,k,lb) = ???
!              facevarz(2,i,j,k,lb) = ???
!              .
!              .
!              .
            enddo
          enddo
        enddo

        endif



        if(nvaredge.gt.0) then

! set values for unk_e_x
        do k=kl_bnd+nguard0*k3d,ku_bnd+(nguard0+1)*k3d
          do j=jl_bnd+nguard0*k2d,ju_bnd+(nguard0+1)*k2d
            do i=il_bnd+nguard0,iu_bnd+nguard0
!              unk_e_x(1,i,j,k,lb) = ???
!              unk_e_x(2,i,j,k,lb) = ???
!              .
!              .
!              .
            enddo
          enddo
        enddo

! set values for unk_e_y
        do k=kl_bnd+nguard0*k3d,ku_bnd+(nguard0+1)*k3d
          do j=jl_bnd+nguard0*k2d,ju_bnd+nguard0*k2d
            do i=il_bnd+nguard0,iu_bnd+(nguard0+1)
!              unk_e_y(1,i,j,k,lb) = ???
!              unk_e_y(2,i,j,k,lb) = ???
!              .
!              .
!              .
            enddo
          enddo
        enddo

! set values for unk_e_z
        do k=kl_bnd+nguard0*k3d,ku_bnd+nguard0*k3d
          do j=jl_bnd+nguard0*k2d,ju_bnd+(nguard0+1)*k2d
            do i=il_bnd+nguard0,iu_bnd+(nguard0+1)
!              unk_e_z(1,i,j,k,lb) = ???
!              unk_e_z(2,i,j,k,lb) = ???
!              .
!              .
!              .
            enddo
          enddo
        enddo

        endif

! Store new solution for this block in secondary copy
        call amr_1blk_to_perm( lcc,lfc,lec,lnc,lb,iopt,idest)

      endif

      enddo ! end loop over grid blocks
      endif

      time = time + dt

      return
      end subroutine advance_soln
